<?xml version="1.0" encoding='UTF-8'?>
<properties>
	<!--本配置文件中最多允许缓存6000条查询sql语句的元数据，超过这个值会提示告警，例如：
		**********************************************************************
		*********************************警告:sql file[com/frameworkset/sqlexecutor/sqlfile.xml]*********************************
		**********************************************************************
		调用方法getPoolManResultSetMetaData从sqlmetacache 中获取sql[select *  from LISTBEAN  where 1=1
							 and id = 6000 ]查询元数据信息时，检测到缓冲区信息记录数超出meta cache区允许的最大cache size:6000,
		导致告警原因分析:
		本条sql或者其他sql语句可能存在不断变化的值参数;
		本条sql或者其他sql语句可能存在的$var模式的变量并且$var的值不断变化;,
		优化建议：
		将sql中可能存在不断变化的值参数转化为绑定变量或者#[variable]变量，或将sql中可能存在的$var模式的变量转换为#[varibale]模式的变量，以提升系统性能!
		**********************************************************************
		**********************************************************************
		如果值设置过小，可以调整resultMetaCacheSize参数
	-->
	<property name="resultMetaCacheSize" value="6000"/>
	<!--本配置文件中最多允许一个动态sql语句派生出5000条查询sql语句，超过这个值会提示告警，例如：
			**********************************************************************
			*********************************警告:sql testBadQuery@file[com/frameworkset/sqlexecutor/sqlfile.xml]*********************************
			**********************************************************************
			调用方法_getVTPLSQLStruction从sql struction cache获取[select *  from LISTBEAN  where 1=1
								 and id = 5000 ]sql struction 信息时,检测到缓冲区信息记录数超出SqlStructionCache允许的最大cache size:5000,
			导致告警原因分析:
			本条sql或者其他sql语句可能存在不断变化的值参数;
			本条sql或者其他sql语句可能存在的$var模式的变量并且$var的值不断变化;,
			优化建议：
			将sql中可能存在不断变化的值参数转化为绑定变量或者#[variable]变量，或将sql中可能存在的$var模式的变量转换为#[varibale]模式的变量，以提升系统性能!
			**********************************************************************
			**********************************************************************
			如果值过小可以调整perKeySqlStructionCacheSize参数
	-->
	<property name="perKeySqlStructionCacheSize" value="5000"/>
	<!--
		sql解析语法结构缓存机制和sql查询元数据缓存机制控制开关，每个配置文件可以单独设置
		true，命中率低也采用缓存机制
		false，命中率低则会采用熔断机制，命中率超过resultMetaCacheSize * 2或者perKeySqlStructionCacheSize *2时将不再从缓存读取相关数据
	-->
	<property name="alwaysCache" value="true"/>

	<description>
<![CDATA[
	sql配置文件
	可以通过名称属性name配置默认sql，特定数据库的sql通过在
	名称后面加数据库类型后缀来区分，例如：
	sqltest
	sqltest-oracle
	sqltest-derby
	sqltest-mysql
	等等，本配置实例就演示了具体配置方法
 ]]>
	</description>
	<property name="sqltest"><![CDATA[select * from LISTBEAN]]>
	</property>
	<property name="sqltest-oracle"><![CDATA[select * from LISTBEAN]]>
	</property>
	<property name="sqltemplate"><![CDATA[select FIELDNAME from LISTBEAN where FIELDNAME=#[fieldName]]]>
	</property>
	<property name="sqltemplate-oracle"><![CDATA[select FIELDNAME from LISTBEAN where FIELDNAME=#[fieldName]  ]]></property>
	<!-- 动态sql，如果FIELDNAME 不等于null，并且FIELDNAME不为""将FIELDNAME作为查询条件 -->
	<property name="dynamicsqltemplate"><![CDATA[select *  from LISTBEAN  where 1=1 
					#if($fieldName && !$fieldName.equals("")) and FIELDNAME = #[fieldName] #end  ]]>
	</property>


	<!-- 动态sql，如果id 不等于-1，并且id不为0将id作为查询条件 -->
	<property name="dynamicsqltemplateid"><![CDATA[select *  from LISTBEAN  where 1=1
					#if($id != -1 && $id != 0) and id = #[id] #end  ]]>
	</property>
	<property name="testGoodQuery"><![CDATA[select *  from td_sm_log  where 1=1
					#if($id != -1 && $id != 0) and log_id1 = #[id] #end  ]]>
	</property>

	<!-- 动态sql，如果id 不等于-1，并且id不为0将id作为查询条件 -->
	<property name="testBadQuery"><![CDATA[select *  from td_sm_log  where 1=1
					#if($id != -1 && $id != 0) and log_id = $id #end  ]]>
	</property>

	<property name="updatesqltemplate"><![CDATA[update LISTBEAN  set FIELDNAME = #[fieldName] where id = #[id] ]]>
	</property>

	<property name="queryFieldWithSQLParams"><![CDATA[select count(1)  from LISTBEAN ]]>
	</property>
	
	<property name="sonsql"><![CDATA[0,2,1]]></property>
	<property name="mainsql"><![CDATA[select count(1)  from LISTBEAN where id in (@{sonsql})]]>
	</property>
	<!--
		属性说明：istpl="true" multiparser="false"
		istpl 标识sql语句中是否有velocity模板引擎语法，如果有则必须设置为true，默认为true
	-->
	<property name="testsqlinfo"  istpl="true" multiparser="false"><![CDATA[select * from TD_APP_BOM where 1=1 ]]></property>
	
	<!-- 
	bboss持久层框架支持夸模块容器引用sql，就是如果本模块的sql语句和另外一个模块的sql语句一样，则可以通过sqlname和sqlfile来进行引用：
	sqlfile:引用的sql文件
	sqlname：引用sqlfile中对于的sql语句的名称
	
	建议不要从sql语句级别引用sql应该从业务层组件引用调用模式来实现，类似于模块之间的接口调用关系
	 -->
	<property name="queryCountMaterialList" 
		sqlname="queryCountMaterialList" 
		sqlfile="com/frameworkset/sqlexecutor/purchaseApply.xml"/>
	
</properties>
